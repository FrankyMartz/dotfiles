#!/usr/bin/env bash
################################################################################
# *** auto-generated by (github.com/FrankyMartz/dotfiles) ***
# Common Bash Config
#
# Author:   Franky Martinez <frankymartz@gmail.com>
################################################################################

#===============================================================================
# PATH Default
#===============================================================================

export PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/git/bin";
export XDG_CONFIG_HOME="${HOME}/.config";
export XDG_DATA_HOME="$HOME/.config/nvim"

#===============================================================================
# Foundation
#===============================================================================

if [[ -d "${HOME}/.iterm2" ]]; then
    PATH="${PATH}:${HOME}/.iterm2";
fi

if [[ -x "$(command -v brew)" ]]; then
    # GNU ----------------------------------------------------------------------
    PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}";
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}";
    export MANPATH;
fi

#===============================================================================
# GPG
#===============================================================================

# In order for gpg to find gpg-agent, gpg-agent must be running, and there must
# be an env variable pointing GPG to the gpg-agent socket. Start gpg-agent or
# set up the GPG_AGENT_INFO variable if it's already running.
# if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
   # shellcheck source=/dev/null
    # source ~/.gnupg/.gpg-agent-info
    # export GPG_AGENT_INFO
# else
    # eval "$(gpg-agent --daemon ~/.gnupg/.gpg-agent-info)"
# fi

#===============================================================================
# NEOVIM
#===============================================================================

export EDITOR="nvim";

#===============================================================================
# FZF
#===============================================================================

# export FZF_DEFAULT_COMMAND='(git ls-tree -r --name-only HEAD || fd --type f --hidden --follow --exclude .git)';
# export FZF_DEFAULT_COMMAND=$(cat <<-END
    # git ls-tree -r --name-only HEAD || 
    # rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null ||
    # fd --type f --hidden --follow --exclude .git
# END
# );
export FZF_DEFAULT_COMMAND=$(cat <<-END
    rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null ||
    fd --type f --hidden --follow --exclude .git
END
);
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}";
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'";

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.

if [[ -x "$(command -v fd)" ]]; then
    _fzf_compgen_path() {
        fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
    }
fi

#===============================================================================
# GNUpg
#===============================================================================
PATH="/usr/local/opt/gnupg/libexec/gpgbin:${PATH}"

#===============================================================================
# IRC
#===============================================================================
export IRCNICK="frankymartz";
export IRCNAME="No Konami Code.";
export IRCSERVER="http://chat.freenode.net";

#===============================================================================
# OpenSSL
#===============================================================================

export PATH="/usr/local/opt/openssl/bin:$PATH"

#===============================================================================
# LANGUAGES
#===============================================================================

# PYTHON -----------------------------------------------------------------------

PATH="/usr/local/opt/python@2/bin:${PATH}"
# PATH="/usr/local/opt/python/libexec/bin:${PATH}"
export PYTHONPATH="${HOME}/.dotfiles/bin/python";
# Auto-Complete
if [[ -x "$(command -v pyenv)" ]]; then
    export PYENV_ROOT="/usr/local/var/pyenv";
    export PYTHON_CONFIGURE_OPTS="--enable-shared"
    eval "$(pyenv init -)";
fi

# Setup Python Virtual Environment
if [[ -x "$(command -v pyenv-virtualenv-init)" ]]; then
    eval "$(pyenv virtualenv-init -)";
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

# GO-LANG ----------------------------------------------------------------------

export GOROOT="/usr/local/opt/go/libexec";
export GOPATH="${HOME}/go";
# export GOPATH="${HOME}/go:${HOME}/go_appengine/gopath";
PATH="${PATH}:${GOROOT}/bin:${GOPATH}/bin";
# PATH="${PATH}:${HOME}/go_appengine";

# RBENV ------------------------------------------------------------------------

## Use Homebrew's directories rather than ~/.rbenv add to your profile
export RBENV_ROOT="/usr/local/var/rbenv"
export PATH="${RBENV_ROOT}/bin:${PATH}"
export PATH="/usr/local/opt/ruby/bin:$PATH"

## Enable shims and autocompletion add to your profile
[[ -x "$(command -v rbenv)" ]] && eval "$(rbenv init -)";

if [[ -x "$(command -v ruby)" && -x "$(command -v gem)" ]]; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:${PATH}";
fi

# PHP --------------------------------------------------------------------------

#PATH="${PATH}:${HOME}/.composer/vendor/bin"

# NodeJS -----------------------------------------------------------------------

PATH="/Users/frankymartz/npm/bin:${PATH}"
export NODENV_ROOT="/usr/local/var/nodenv"
[[ -x "$(command -v nodenv)" ]] && eval "$(nodenv init -)"

# Mono -------------------------------------------------------------------------

export MONO_GAC_PREFIX="/usr/local"
export GTAGSLABEL="pygment"
